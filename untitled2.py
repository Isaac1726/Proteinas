# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UmxeBg_5MeugNfm8AatawabcPwehHnt0
"""

# Importa las librerías necesarias
import streamlit as st
import py3Dmol
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from Bio.PDB import PDBParser
import py3Dmol
from biopandas.pdb import PandasPdb

# Diccionario con información básica de las proteínas
protein_info = {
    "1A2C": "Proteína de unión a DNA involucrada en la regulación transcripcional.",
    "1BML": "Hemoglobina humana utilizada en el transporte de oxígeno.",
    "1D5M": "Enzima asociada al metabolismo de carbohidratos.",
    "1D5X": "Proteína estructural bacteriana.",
    "1D5Z": "Fragmento de anticuerpo monoclonal.",
    "1D6E": "Proteína involucrada en la fotosíntesis.",
    "1DEE": "Catalizador en procesos metabólicos específicos.",
    "1E9F": "Proteína de señalización celular.",
    "1FC2": "Molécula responsable del transporte de hierro.",
    "1FCC": "Enzima que participa en la degradación de lípidos.",
    "1G4U": "Proteína estructural de virus.",
    "1GZS": "Regulador transcripcional importante.",
    "1HE1": "Proteína enzimática de procesos metabólicos.",
    "1HEZ": "Proteína relacionada con la resistencia antibiótica.",
    "1HQR": "Proteína de transferencia de electrones.",
    "1HXY": "Proteína de transporte de metales pesados.",
    "1IBX": "Componente de membrana celular.",
    "1JBU": "Enzima que participa en el metabolismo del ADN.",
    "1JWM": "Proteína de defensa bacteriana.",
    "1JWS": "Estructura viral utilizada en estudios de virología."
}

# Configura el título de la app
st.title("Dashboard de Visualización de Proteínas")

# Menú desplegable para seleccionar una proteína
selected_protein = st.selectbox("Selecciona una proteína:", list(protein_info.keys()))

# Muestra información básica de la proteína seleccionada
st.subheader(f"Información sobre la proteína {selected_protein}:")
st.write(protein_info[selected_protein])

# Carga los datos de la proteína seleccionada
@st.cache_data
def load_protein_data(pdb_id):
    url = f"https://files.rcsb.org/download/{pdb_id}.pdb"
    ppdb = PandasPdb().fetch_pdb(pdb_id)
    return ppdb

ppdb = load_protein_data(selected_protein)

# Indicador 1: Información de los átomos
st.subheader("Información de los átomos:")
df_atom = ppdb.df["ATOM"]
st.write(df_atom.head())

# Indicador 2: Gráfico 3D de residuos
st.subheader("Gráfico 3D de residuos:")
fig = px.scatter_3d(
    df_atom,
    x="x_coord",
    y="y_coord",
    z="z_coord",
    color="residue_name",
    template="plotly_dark"
)
fig.update_traces(marker=dict(size=3))
st.plotly_chart(fig)

# Indicador 3: Visualización de la proteína con fondo personalizable
st.subheader("Visualización de la proteína:")
background_color = st.color_picker("Selecciona el color del fondo:", "#ffffff")

view = py3Dmol.view(width=900, height=600)
pdb_data = "".join(ppdb.pdb_text.splitlines(keepends=True))  # Formato correcto para Py3Dmol
view.addModel(pdb_data, "pdb")
view.setStyle({"cartoon": {"color": "spectrum"}})
view.setBackgroundColor(background_color)
view.zoomTo()
view.show()
st.components.v1.html(view._make_html(), height=600)

# Indicador 4: Distribución de elementos
st.subheader("Distribución de elementos:")
element_counts = ppdb.df["ATOM"]["element_symbol"].value_counts()
fig, ax = plt.subplots(figsize=(10, 5))
element_counts.plot(kind="barh", color="red", ax=ax)
ax.set_title("Distribución de elementos")
ax.set_xlabel("Cantidad")
ax.set_ylabel("Elemento")
st.pyplot(fig)